import { query as q } from 'faunadb';

export const values = {
  array: ['array'],
  array_tuple: ['one', 1],
  array_from_string: 'one;two;three',
  array_from_string_path: 'root.sub.prop.value',
  array_from_object: { one: 1, two: 2 },
  array_of_strings: ['one', 'two'],
  array_of_numbers: [1, 2, 3],
  array_of_objects: [{ x: 1 }, { y: 2 }],
  boolean_true: true,
  boolean_false: false,
  boolean_from_number_1: 1,
  boolean_from_number_0: 0,
  boolean_from_string_true: 'true',
  boolean_from_string_false: 'false',
  boolean_from_string_on: 'on',
  boolean_from_string_off: 'off',
  bytes_uint8array: new Uint8Array([1, 2, 3, 4]),
  bytes: q.Bytes('AQIDBA=='),
  collection: q.Collection('letters'),
  // credential: q.Ref('credentials/self'),
  database: q.Database('child_db'),
  date: q.Date('2019-11-12'),
  number_float: 10.1,
  number_integer: 10,
  number_integer_from_string: '10',
  number_float_from_string: '10.1',
  function: q.Function('double'),
  index: q.Index('all_letters'),
  key: q.Ref(q.Keys(), '248967241620521472'),
  // function_query: q.Query(q.Lambda('x', q.Var('x'))),
  null: null,
  object: { x: 10 },
  object_deep: { profile: { name: 'Joe', age: 20 }, address: { street: 'Main avenue' } },
  object_numbers: {
    '1': 'one',
    '2': 'two',
    '3': 'three',
  },
  role: q.Role('employees'),
  // match_query: q.Match(q.Index('all_letters')),
  string: 'ten',
  string_numeric: '10',
  time_now: q.Now(),
  token: q.Ref(q.Tokens(), '249062079147803136'),
  document: q.Ref(q.Collection('letters'), '123'),
  reference: q.Ref(q.Collection('letters'), '456'),
  // set_match: q.Match(q.Index('all_letters')),
  // lambda_query: q.Lambda('x', {
  //   value: q.Var('x'),
  //   IsBoolean: q.IsBoolean(q.Var('x')),
  // }),
};
